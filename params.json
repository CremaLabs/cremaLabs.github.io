{
  "name": "Political-tambourine.GitHub.io",
  "tagline": "Crema documentation",
  "body": "#Crema\r\n##Table of Contents\r\n####Overview\r\n#### Development Environment Setup\r\n####API Endpoints\r\n\r\n\r\n\r\n##Overview\r\n####Crema is a mobile application that leverages real time data submitted by its users to provide availability score on coffee shops near a user.  People use Crema to figure out what coffee shops are near them, and to see which ones have available seats (and wifi) and which ones do not.  After logging in, users are taken to a map view displaying nearby coffee shops.  The color of the marker indicates availability information at a glance, but the user can click the marker or access a separate list view of the shops for more details. Users are also able to submit an availability rating for a coffee shop they are in.\r\n####Crema's front end is built with Angular 2 and Typescript, Ionic 2 and Cordova. Ionic 2 is a framework that allows for web facing HTML and CSS to be rendered in a phone application as a hybrid application, rather than native.  Cordova is a platform with plugin modules that make native phone functionality available to hybrid applications.  We are using Cordova to use the native Google Map technology on phones, as opposed to a web-view map.\r\n####Client side files live in the `Crema` directory, and backend files are in the `crema-api-server` directory.\r\n\r\n\r\n##Development Environment Setup\r\n####Cordova and Ionic require the installation of various modules before they can be used. Complete information for this setup, as well as how to run the iOS emulator can be found in the Readme file of the `Crema` repository.\r\n####Client side development should be done in the `App` directory.  Ionic will compile code in this directory to mobile-ready code that is placed inside the `www` directory. Do not modify files in this directory.\r\n####Angular 2 uses Typescript, which must be transpiled to JavaScript before running.  The Crema repo has all necessary typescript configuration files for transpilation to work out of the box.\r\n\r\n\r\n##API Endpoints\r\n###User\r\n###Metrics\r\n####`POST /v1/metrics/`  We store the metrics in the metrics schema which uses a shopID that is provided by Google and an availRating equal to either one or four submitted by the user to describe how busy a cafe is. The route calls the exported function `addRating` which looks at `req.body` and its properties and stores those to the metrics table in the database.\r\n####`GET /v1/metrics/` This route is not used because the handler function triggered by `GET /v1/shops/` results in a separate function call (`getRatingsForShopsByPlaceIds`) that queries the database and return an average availability rating for each shop. Since the querying of the Metrics table is done from that function, this GET handler is not necessary but remains in the codebase from an earlier version.\r\n\r\n\r\n###Shops\r\n####`GET /v1/shops/` This results in a call to the `get` function in `shops/shops.controller.js`.  This function initiates a GET request to the Google places API centered on the user's current location.  The request returns an array of JSON data for those coffee shops.\r\n\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}